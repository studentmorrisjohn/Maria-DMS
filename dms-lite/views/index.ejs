<!DOCTYPE html>
<html>

    <head>
       
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title>Project Maria</title>
        <%- include ('partials/head') %>

        <!-- Leaflet CSS-->
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"
        integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI="
        crossorigin=""/>

        <!--Leaflet JavaScript-->
        <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"
        integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM="
        crossorigin=""></script>

        <!-- SOCKET IO -->
	    <script src="/socket.io/socket.io.js"></script>

    </head>


    <body>
        <div class="bg-div">
            <%- include ('partials/nav' , {page:"home"}) %>
            <div id ="info-modal">
                <div class="modal_row">
                    <span class="modal_category">Client ID: </span><span class="modal_value" id="modal_clientId">  </span> 
                </div>
                <div class="modal_row">
                    <span class="modal_category">Location: </span><span class="modal_value" id="modal_location">  </span> 
                </div>
                <div class="modal_row">
                    <span class="modal_category">Name: </span><span class="modal_value" id="modal_rescuee_name"> </span>
                </div>
                <div class="modal_row">
                    <span class="modal_category">Phone Number: </span><span class="modal_value" id="modal_phone">  </span> 
                </div>
                <hr>
                <div class="modal_row">
                    <span class="modal_category">Type: </span><span class="modal_value red" id="modal_emergency">  </span> 
                </div>
                <div class="modal_row">
                    <span class="modal_category">Needs: </span><span class="modal_value" id="modal_needs">  </span>
                </div>
                <div class="modal_row">
                    <span class="modal_category">Dangers: </span><span class="modal_value" id="modal_dangers">  </span>
                </div>
                <hr >
                <div class="modal_row">
                    <span class="modal_category">#of People: </span><span class="modal_value" id="modal_noOfPeople"> </span>
                </div>
                <div class="modal_row">
                    <span class="modal_category">Immobile: </span><span class="modal_value" id="modal_immobile"> </span>
                </div>
                <div class="modal_row">
                    <span class="modal_category">Message: </span><span class="modal_value" id="modal_message"> </span>
                </div>
                <!-- <div class="modal_status">
                    <span class="modal_status_text"> RESCUERS SENT </span>
                </div> -->
            </div>
            <div id="map"></div>
            <%- include ('partials/footer') %>
        </div>
	    
        

        
        <script>

            const initialPosition = [14.734902, 120.987555]
            const zoom = 18
            var modalClientId = "SSSS"


            // SOCKET IO
            const socket = io('http://localhost:5345')
	        socket.on("connection");

            socket.on("addData", function(data) {
                getData();
                getDetails();
            });


            socket.on("new_location", function(data) {                              
                getData();
                getDetails();
            });
            
            // All OpenStreetMap Testing

            //Map Variable
            var map = L.map('map');
            map.setView(initialPosition, zoom)

            const clearMap = () => {
                map.eachLayer(function (layer) {
                    if (layer instanceof L.Marker) {
                        map.removeLayer(layer);
                    }
                });

                console.log("Gumana, pre!");
            }

            const getData = async () => {
                fetch('/testdata/getCoordinates?cache-buster=' + Date.now())
                    .then(response => response.json())
                    .then(data => {
                        clearMap();
                        console.log(data);
                        data.map((coor) => {
                            
                            const payload = coor.payload.split("*");

                            try {
                                if (payload[3] == "0") {
                                    var marker = L.marker([payload[1], payload[2]]).addTo(map);
                                    // marker.bindPopup(`DEVICE ID - ${payload[0]}`).openPopup();
                                    
                                    marker.on('click', function() {
                                        showModal(payload);
                                    });
                                } else {
                                    console.log("ligtas na siya hehe");
                                    if (payload[0] == modalClientId) {
                                        var div = document.getElementById("info-modal");
                                        div.style.display = "none";
                                    }
                                }
                            } catch {
                                console.log("something went wrong");
                            }

                        })
                    })
                    .catch(error => {
                        console.error(error);
                    });
            }

            const getDetails = async () => {
                fetch('/testData/getDetails?clientId=' + modalClientId)
                    .then(response => response.json())
                    .then(data => {
                        //console.log(data);
                        updateModalInfo(data);
                    })
                    .catch(error => {
                        console.error(error);
                    });
            }

            var coors = getData();
            

            //Tile Layer
            L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            //Map Attribution
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
            }).addTo(map);

            //Popups 
            
            var popup = L.popup();


            function onMapClick(e) {
                popup
                .setLatLng(e.latlng)
                .setContent("The coordinates are as follow " + e.latlng.toString())
                .openOn(map);
            }
            
            map.on('click', onMapClick);

            function showModal(payload) {

                var div = document.getElementById("info-modal");
                
                var location_element = document.getElementById("modal_location");
                var client_id_element = document.getElementById("modal_clientId");

                var clientId = payload[0];
                var location = `${payload[1]}, ${payload[2]}`

                modalClientId = clientId

                getDetails();


                div.style.display = "block";


                

                
                location_element.textContent = location; 
                client_id_element.textContent = clientId; 


            }

            

            function updateModalInfo(data) {
                if (!data) {
                    return;
                }
                console.log(data);

                

                var name_element = document.getElementById("modal_rescuee_name");
                var number_element = document.getElementById("modal_phone");
                var emergency_element = document.getElementById("modal_emergency");
                var needs_element = document.getElementById("modal_needs");
                var danger_element = document.getElementById("modal_dangers");
                var num_people_element = document.getElementById("modal_noOfPeople");
                var immobile_element = document.getElementById("modal_immobile");
                var message_element = document.getElementById("modal_message");

                try {
                    const payload = data[0]["payload"].split("*");
                    console.log(payload);
                    var name = payload[1];
                    var number = payload[2];
                    var emergency = payload[3];
                    var needs = payload[4];
                    var dangers = payload[5];
                    var num_people = payload[6];
                    var immobile = payload[7];
                    var message = payload[8];

                    if (!num_people) {
                        num_people = 1;
                    }

                    if (immobile == "0") {
                        immobile = "No";
                    } else {
                        immobile = "Yes";
                    }


                    console.log(payload[3]);


                    name_element.textContent = name;
                    number_element.textContent = number;
                    emergency_element.textContent = parseEmergency(emergency);
                    needs_element.textContent = parseNeeds(needs);
                    danger_element.textContent = parseDangers(dangers);
                    num_people_element.textContent = num_people;
                    immobile_element.textContent = immobile;
                    message_element.textContent = message;
                } catch {
                    name_element.textContent = "";
                    number_element.textContent = "";
                    emergency_element.textContent = "";
                    needs_element.textContent = "";
                    danger_element.textContent = "";
                    num_people_element.textContent = "";
                    immobile_element.textContent = "";
                    message_element.textContent = "";
                }

                
                
            }

            function parseEmergency(emergency) {
                var emergencyString = emergency.split("+");
                const emergencyList = ["Medical", "Fire", "LandSlide", "Trapped", "Lost"];
                var emergencies = removeBracketsAndWhitespace(emergencyString[0]);

                

                return convertStringToList(emergencies, emergencyList) + emergencyString[1];
            }

            function parseNeeds(needs) {{
                var needsString = needs.split("+");
                const needsList = ["First Aid", "Shelter", "Food / Water", "Rescue"];
                var _needs = removeBracketsAndWhitespace(needsString[0]);

                return convertStringToList(_needs, needsList) + needsString[1];
            }}

            function parseDangers(dangers) {{
                var dangersString = dangers.split("+");
                const dangersList = ["Blocked Trail", "Explosives", "Fire / Smokes", "Wild Animals", "Fallen Trees", "Chemicals"];
                var _dangers = removeBracketsAndWhitespace(dangersString[0]);

                return convertStringToList(_dangers, dangersList) + dangersString[1];
            }}

            function removeBracketsAndWhitespace(str) {
                // Use regular expression with the replace() method
                return str.replace(/^\s*\[|\]\s*$/g, '');
            }




            function convertStringToList(str, the_list) {
                // Split the string by asterisk to get individual values
                var values = str.split(',');

                // Create an empty array to store the selected values
                var selectedValues = [];

                try {
                    // Iterate over each value and check if it's 1
                    for (var i = 0; i < values.length; i++) {
                        if (values[i] === '1' && the_list[i]) {
                            selectedValues.push(the_list[i]);
                        }
                    }
                }
                catch (error) {
                    var selectedValues = [];
                }

                

                // Return the selected values as a comma-separated string
                return selectedValues.join(", ");
            }


        </script>

    </body>


</html>
